# Enth√§lt die standard Targets. Wird in den Makefiles per include eingebunden.

XCCONFIG=
ifeq ("$(CODE_SIGN)","1")
    XCCONFIG = "CODE_SIGN_IDENTITY=Developer ID Application: Lukas Pitschl"
	MACROS += CODE_SIGN_CHECK
endif

ifeq ("$(DEBUG)","1")
	MACROS += DEBUGGING
endif

XCCONFIG += 'GCC_PREPROCESSOR_DEFINITIONS=$$inherited $(MACROS)'


# Force signing of pkg if make deploy is run.
ifeq ($(findstring deploy, $(MAKECMDGOALS)), deploy)
        export PKG_SIGN = 1
endif

ifdef NEED_LIBMACGPG
	LIBMACGPG_REPO = Libmacgpg.xcodeproj
endif

ifndef PRODUCT
	PRODUCT = simple-compile
endif

ifeq ($(USER),root)
	INSTALL_ROOT = /
else
	INSTALL_ROOT = "$$HOME/"
endif

SCRIPTS_DIR = ./Dependencies/GPGTools_Core/newBuildSystem

CONFIG ?= Release
VPATH ?= build/Release



all: compile

help:
	@echo "compile          - compile the sources"
	@echo "install          - install the product"
	@echo "clean            - remove generated files"
	@echo "clean-pkg        - remove generated pkg's"
ifdef NEED_LIBMACGPG
	@echo "clean-libmacgpg  - remove libmacgpg files"
endif
	@echo "clean-all        - remove all generated files"
	@echo "update           - update all sources"
	@echo "update-me        - update the sources"
	@echo "update-core      - update the core dependency"
ifdef NEED_LIBMACGPG
	@echo "update-libmacgpg - update libmacgpg dependency"
endif
	@echo "pkg              - generate main pkg"
	@echo "pkg-core         - generate core pkg"
ifdef NEED_LIBMACGPG
	@echo "pkg-libmacgpg    - generate libmacgpg pkg"
endif
	@echo "dmg              - generate dmg"
	@echo "gpg-sig          - sign dmg with gpg"
	@echo "uninstaller-sig  - sign uninstaller"
#	@echo "pkg-prepare-for-installer - copy the created core package into a specified folder
	@echo "release-patch"   - release a new patch version
	@echo "release-minor"   - release a new minor version
	@echo "release-major"   - release a new major version
	@echo "release-custom"  - release a custom version where the exact version is specified.
	@echo "release" 		- alias for release custom
	@echo "release-notes version=<version>" - create a release notes file
	@echo "CODE_SIGN=1      - enable code signing"
	@echo "PKG_SIGN=1       - enable pkg  signing"


test:
	@xcodebuild -project $(PROJECT).xcodeproj -target $(TEST_TARGET) -configuration $(CONFIG) build 

ifeq ("$(wildcard $(PROJECT).xcodeproj)", "")

clean:
	@rm -rf ./build/*

else ifneq ("$(SCHEME)", "")

clean:
	@xcodebuild -project $(PROJECT).xcodeproj -scheme "$(SCHEME)" -configuration $(CONFIG) clean > /dev/null
	@rm -rf ./build/*

else

clean:
	@xcodebuild -project $(PROJECT).xcodeproj -target $(TARGET) -configuration $(CONFIG) clean > /dev/null
	@rm -rf ./build/*

endif

ifdef NEED_LIBMACGPG

VPATH += :Dependencies/Libmacgpg:Dependencies/Libmacgpg/build/$(CONFIG)/Libmacgpg.framework/Versions/Current:/Library/Frameworks/Libmacgpg.framework/Versions/Current:$(HOME)/Library/Frameworks/Libmacgpg.framework/Versions/Current

$(LIBMACGPG_REPO):
	@echo "Prepare Libmacgpg"
	@bash -c "$$(curl -fsSL https://raw.github.com/GPGTools/GPGTools_Core/master/newBuildSystem/prepare-libmacgpg.sh)"

Libmacgpg: $(LIBMACGPG_REPO)
	@"$(MAKE)" -C Dependencies/Libmacgpg compile

$(PRODUCT): Libmacgpg

update: update-libmacgpg

update-libmacgpg: $(LIBMACGPG_REPO)
	"$(MAKE)" -C Dependencies/Libmacgpg update

pkg: pkg-libmacgpg

pkg-libmacgpg: $(LIBMACGPG_REPO)
	"$(MAKE)" -C Dependencies/Libmacgpg pkg-core

clean-all: clean-libmacgpg

clean-libmacgpg: $(LIBMACGPG_REPO)
	"$(MAKE)" -C Dependencies/Libmacgpg clean-all

endif



simple-compile:
	@xcodebuild -project $(PROJECT).xcodeproj -target $(TARGET) -configuration $(CONFIG) build $(XCCONFIG)

compile: $(PRODUCT)

clean-pkg:
	@rm -rf ./build/*.pkg*

clean-all: clean

pkg-core: compile
	@$(SCRIPTS_DIR)/pkg-core.sh

pkg: pkg-core
	@$(SCRIPTS_DIR)/pkg.sh

dmg: pkg
	@$(SCRIPTS_DIR)/dmg.sh

gpg-sig: dmg
	@$(SCRIPTS_DIR)/gpgSig.sh

uninstaller-sig:
	@$(SCRIPTS_DIR)/uninstallerSig.sh
	
signed-dmg: gpg-sig

update-me:
	@$(SCRIPTS_DIR)/update.sh

update-core:
	"$(MAKE)" -C Dependencies/GPGTools_Core update

update: update-me update-core

# Special target for copying the created core package into a specified folder.
pkg-prepare-for-installer: pkg-core
	@$(SCRIPTS_DIR)/pkg-prepare-for-installer.sh $(CORE_PKG_DIR) $(PROJECT) $(ALT_NAME)

# Targets to create new release
release-patch:
	@$(SCRIPTS_DIR)/prepare-release.py --patch

release-minor:
	@$(SCRIPTS_DIR)/prepare-release.py --minor

release-major:
	@$(SCRIPTS_DIR)/prepare-release.py --major

release-custom:
	@$(SCRIPTS_DIR)/prepare-release.py --custom

release:
	@$(SCRIPTS_DIR)/prepare-release.py --custom

deploy: dmg
	@$(SCRIPTS_DIR)/deploy-release.py ${name}-${version}

release-notes:
	@$(SCRIPTS_DIR)/prepare-release-notes.py ${version}

